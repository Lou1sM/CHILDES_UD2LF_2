commands used from the src directory unless otherwsie stated

if changing CoNLL file:
	python preprocess.py
	
    cat ../LF/conll/full_adam/adam.all.conll.txt | java -cp ./out/production/UDeplambda:lib/* deplambda.others.ConvertConllToGraphParserSentence > ../LF/conll/full_adam/adam.all.input.txt

if changing UDepLambda:
    recompile UDepLambda
     
UD-to-LF conversion of the whole corpus (from UDepLambda directory):
    : > ../LF/logs/conversion_debug.txt
    
	cat ../LF/conll/full_adam/adam.all.input.txt | java -Dfile.encoding="UTF-8" -cp out/production/UDepLambda:lib/* deplambda.others.NlpPipeline  annotators tokenize,ssplit     tokenize.whitespace true     ssplit.eolonly true     languageCode en     deplambda true     deplambda.definedTypesFile lib_data/ud-childes.types.txt     deplambda.treeTransformationsFile lib_data/ud-tree-transformation-rules-childes.proto.txt     deplambda.relationPrioritiesFile lib_data/ud-relation-priorities-childes.proto.txt     deplambda.lambdaAssignmentRulesFile lib_data/ud-lambda-assignment-rules-childes.proto.txt     deplambda.lexicalizePredicates true     deplambda.debugToFile ../LF/logs/conversion_debug.txt     nthreads 1 > ../LF/LF_files/full_adam/adam.all.lf.json
	
	python postprocess.py -i ../LF_files/full_adam/adam.all.lf.json -c ../conll/full_adam/adam.all.input.txt

isolating failed cases:
	: > ../problematic.txt;cat ../logs/failed.txt ../logs/unreadable.txt >>../problematic.txt
	: > ../problematic_sentences.txt;cat ../logs/failed_sentences.txt ../logs/unreadable_sentences.txt >>../problematic_sentences.txt
    
    : > ../LF/logs/conversion_debug.txt
    cat ../LF/problematic.txt | java -Dfile.encoding="UTF-8" -cp out/production/UDepLambda:lib/* deplambda.others.NlpPipeline  annotators tokenize,ssplit     tokenize.whitespace true     ssplit.eolonly true     languageCode en     deplambda true     deplambda.definedTypesFile lib_data/ud-childes.types.txt     deplambda.treeTransformationsFile lib_data/ud-tree-transformation-rules-childes.proto.txt     deplambda.relationPrioritiesFile lib_data/ud-relation-priorities-childes.proto.txt     deplambda.lambdaAssignmentRulesFile lib_data/ud-lambda-assignment-rules-childes.proto.txt     deplambda.lexicalizePredicates true     deplambda.debugToFile ../LF/conversion_debug.txt     nthreads 1 > ../LF/problematic.lf.json
    
    python postprocess.py -i ./problematic.lf.json -c ./problematic.txt
    (just in case)


adding new transformation types:
   after modifying the protobuf file run
   protoc --java_out=./src/ ./protos/transformation-rules.proto in UDepLambda dir
   
generate final LFs:
	python postprocess.py -i ../LF_files/full_adam/adam.all.lf.json -c ../conll/full_adam/adam.all.input.txt -o ../LF_files/full_adam/adam.all_lf.txt


